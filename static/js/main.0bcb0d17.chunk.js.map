{"version":3,"sources":["components/TodoList/TodoList.jsx","api.js","components/CurrentUser/CurrentUser.jsx","App.jsx","index.js"],"names":["TodoList","state","query","selectedStatus","handleChange","event","target","name","value","setState","this","props","todos","userId","onChange","todosFiltered","filter","todo","title","includes","completed","className","htmlFor","type","id","placeholder","map","key","onClick","React","Component","defaultProps","BASE_URL","getTodos","url","fetch","options","then","res","ok","Error","status","statusText","json","getUserDatas","a","getUsersFromServer","CurrentUser","user","usersFromServer","data","previousProps","email","phone","App","selectedUserId","clearSelectedUserId","setSelectedUserId","result","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0bcb0d17.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './TodoList.scss';\n\nexport class TodoList extends React.Component {\n  state = {\n    query: '',\n    selectedStatus: '',\n  };\n\n  handleChange = (event) => {\n    const { name, value } = event.target;\n\n    this.setState({\n      [name]: value,\n    });\n  };\n\n  render() {\n    const { todos, userId, onChange } = this.props;\n    const { query, selectedStatus } = this.state;\n\n    let todosFiltered = todos\n      .filter(todo => (todo\n        && todo.title\n        && todo.title.includes(query)));\n\n    switch (selectedStatus) {\n      case 'active':\n        todosFiltered = todosFiltered\n          .filter(todo => todo.completed === false);\n        break;\n\n      case 'completed':\n        todosFiltered = todosFiltered\n          .filter(todo => todo.completed === true);\n        break;\n\n      default:\n        todosFiltered = [...todosFiltered];\n        break;\n    }\n\n    return (\n      <div className=\"TodoList\">\n        <div className=\"TodoList__inputs\">\n          <div className=\"TodoList__search-query\">\n            <label htmlFor=\"search-query\" className=\"label\">\n              Search title:\n            </label>\n\n            <div className=\"control\">\n              <input\n                type=\"text\"\n                name=\"query\"\n                id=\"search-query\"\n                className=\"input\"\n                placeholder=\"Type search word\"\n                value={query}\n                onChange={this.handleChange}\n              />\n            </div>\n          </div>\n\n          <div className=\"TodoList__select-completed\">\n            <label htmlFor=\"select-completed\">\n              Completed:\n              <br />\n            </label>\n\n            <select\n              name=\"selectedStatus\"\n              id=\"select-completed\"\n              value={selectedStatus}\n              onChange={this.handleChange}\n            >\n              <option value=\"all\">all</option>\n              <option value=\"active\">active</option>\n              <option value=\"completed\">completed</option>\n            </select>\n            <br />\n          </div>\n        </div>\n\n        <h2>Todos:</h2>\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {todosFiltered.map(todo => (\n              <li\n                key={todo.id}\n                className={todo.completed\n                  ? 'TodoList__item TodoList__item--checked'\n                  : 'TodoList__item TodoList__item--unchecked'\n                }\n              >\n                <label>\n                  <input\n                    type=\"checkbox\"\n                    value={todo.completed || false}\n                  />\n                  <p>{todo.title}</p>\n                </label>\n\n                <button\n                  className={\n                    userId\n                      ? 'TodoList__user-button--selected button'\n                      : 'TodoList__user-button button'\n                  }\n                  type=\"button\"\n                  onClick={() => {\n                    onChange(todo.userId);\n                  }}\n                >\n                  User&nbsp;#\n                  {todo.userId}\n                </button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nTodoList.propTypes = {\n  userId: PropTypes.number,\n  onChange: PropTypes.func.isRequired,\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      userId: PropTypes.number,\n      title: PropTypes.string,\n    }).isRequired,\n  ).isRequired,\n};\n\nTodoList.defaultProps = {\n  userId: 0,\n};\n","const BASE_URL = 'https://mate-api.herokuapp.com';\n\nexport const request = (url, options) => fetch(`${BASE_URL}${url}`, options)\n  .then((res) => {\n    if (!res.ok) {\n      throw new Error(`${res.status} - ${res.statusText}`);\n    }\n\n    return res.json();\n  });\n\nexport const getTodos = () => request('/todos');\n\nexport const getUserDatas = async(userId) => {\n  const getUsersFromServer = await fetch(`${BASE_URL}/users/${userId}`);\n\n  return getUsersFromServer.json();\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './CurrentUser.scss';\nimport { getUserDatas } from '../../api';\n\nexport class CurrentUser extends React.Component {\n  state = {\n    user: {},\n  }\n\n  async componentDidMount() {\n    const usersFromServer = await getUserDatas(this.props.userId);\n\n    this.setState({ user: usersFromServer.data });\n  }\n\n  async componentDidUpdate(previousProps) {\n    const usersFromServer = await getUserDatas(this.props.userId);\n\n    if (previousProps.userId !== usersFromServer.data.id) {\n      // eslint-disable-next-line react/no-did-update-set-state\n      this.setState({ user: usersFromServer.data });\n    }\n  }\n\n  render() {\n    const { userId, onChange } = this.props;\n    const { user } = this.state;\n\n    return (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\">\n          <button\n            className=\"CurrentUser__clear\"\n            type=\"button\"\n            onClick={() => {\n              onChange(userId);\n            }}\n\n          >\n            Clear\n          </button>\n          <span>\n            Selected user:\n            &nbsp;\n            {userId}\n          </span>\n        </h2>\n\n        <h3 className=\"CurrentUser__name\">{user.name}</h3>\n        <p className=\"CurrentUser__email\">{user.email}</p>\n        <p className=\"CurrentUser__phone\">{user.phone}</p>\n      </div>\n    );\n  }\n}\n\nCurrentUser.propTypes = {\n  userId: PropTypes.number.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    selectedUserId: 0,\n  };\n\n  componentDidMount() {\n    getTodos()\n      .then((result) => {\n        this.setState({ todos: result.data });\n      });\n  }\n\n  clearSelectedUserId = () => {\n    this.setState({\n      selectedUserId: 0,\n    });\n  }\n\n  setSelectedUserId = (result) => {\n    this.setState({\n      selectedUserId: result,\n    });\n  }\n\n  render() {\n    const { todos, selectedUserId } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={todos}\n            onChange={(userId) => {\n              this.setSelectedUserId(userId);\n            }}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n                onChange={(userId) => {\n                  this.clearSelectedUserId(userId);\n                }}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}