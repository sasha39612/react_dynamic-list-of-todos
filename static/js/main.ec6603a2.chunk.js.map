{"version":3,"sources":["components/TodoList/TodoList.jsx","api.js","components/CurrentUser/CurrentUser.jsx","App.jsx","index.js"],"names":["TodoList","todos","userId","onChange","query","onSelectInputChange","statusSelected","onFilterInputChange","checkTodo","className","htmlFor","type","name","id","placeholder","value","event","target","map","todo","key","classNames","completed","checked","title","onClick","defaultProps","BASE_URL","getTodos","url","fetch","options","then","res","ok","Error","status","statusText","json","getUser","a","response","CurrentUser","state","user","this","props","userFromServer","setState","data","previousProps","email","phone","React","Component","App","selectedUserId","clearSelectedUserId","setSelectedUserId","result","text","onCheckChange","todoId","prevState","competed","todosFiltered","filter","includes","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ec6603a2.chunk.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport './TodoList.scss';\n\nexport const TodoList = ({\n  todos,\n  userId,\n  onChange,\n  query,\n  onSelectInputChange,\n  statusSelected,\n  onFilterInputChange,\n  checkTodo,\n}) => (\n  <div className=\"TodoList\">\n    <div className=\"TodoList__inputs\">\n      <div className=\"TodoList__search-query\">\n        <label htmlFor=\"search-query\" className=\"label\">\n          Search title:\n        </label>\n\n        <div className=\"control\">\n          <input\n            type=\"text\"\n            name=\"query\"\n            id=\"search-query\"\n            className=\"input\"\n            placeholder=\"Type search word\"\n            value={query}\n            onChange={(event) => {\n              onFilterInputChange(event.target.value);\n            }}\n          />\n        </div>\n      </div>\n\n      <div className=\"TodoList__select-completed\">\n        <label htmlFor=\"select-completed\">\n          Completed:\n          <br />\n        </label>\n\n        <select\n          name=\"statusSelected\"\n          id=\"select-completed\"\n          value={statusSelected}\n          onChange={(event) => {\n            onSelectInputChange(event.target.value);\n          }}\n        >\n          <option value=\"all\">all</option>\n          <option value=\"active\">active</option>\n          <option value=\"completed\">completed</option>\n        </select>\n        <br />\n      </div>\n    </div>\n\n    <h2>Todos:</h2>\n    <div className=\"TodoList__list-container\">\n      <ul className=\"TodoList__list\">\n        {todos.map(todo => (\n          <li\n            key={todo.id}\n            className={classNames(\n              'TodoList__item',\n              { 'TodoList__item--checked': todo.completed },\n              { 'TodoList__item--unchecked': !todo.completed },\n            )}\n          >\n            <label>\n              <input\n                checked={todo.completed}\n                type=\"checkbox\"\n                onChange={() => {\n                  checkTodo(todo.id);\n                }}\n              />\n              <p>{todo.title}</p>\n            </label>\n\n            <button\n              className={\n                userId\n                  ? 'TodoList__user-button--selected button'\n                  : 'TodoList__user-button button'\n              }\n              type=\"button\"\n              onClick={() => {\n                onChange(todo.userId);\n              }}\n            >\n              User&nbsp;#\n              {todo.userId}\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  </div>\n);\n\nTodoList.propTypes = {\n  userId: PropTypes.number,\n  onChange: PropTypes.func.isRequired,\n  checkTodo: PropTypes.func.isRequired,\n  query: PropTypes.string,\n  statusSelected: PropTypes.string,\n  onSelectInputChange: PropTypes.func.isRequired,\n  onFilterInputChange: PropTypes.func.isRequired,\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      userId: PropTypes.number,\n      title: PropTypes.string,\n    }).isRequired,\n  ).isRequired,\n};\n\nTodoList.defaultProps = {\n  userId: 0,\n  query: '',\n  statusSelected: '',\n};\n","const BASE_URL = 'https://mate-api.herokuapp.com';\n\nexport const request = (url, options) => fetch(`${BASE_URL}${url}`, options)\n  .then((res) => {\n    if (!res.ok) {\n      throw new Error(`${res.status} - ${res.statusText}`);\n    }\n\n    return res.json();\n  });\n\nexport const getTodos = () => request('/todos');\n\nexport const getUser = async(userId) => {\n  const response = await fetch(`${BASE_URL}/users/${userId}`);\n\n  return response.json();\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './CurrentUser.scss';\nimport { getUser } from '../../api';\n\nexport class CurrentUser extends React.Component {\n  state = {\n    user: {},\n  }\n\n  async componentDidMount() {\n    const userFromServer = await getUser(this.props.userId);\n\n    this.setState({ user: userFromServer.data });\n  }\n\n  async componentDidUpdate(previousProps) {\n    if (previousProps.userId !== this.props.userId) {\n      const userFromServer = await getUser(this.props.userId);\n\n      // eslint-disable-next-line react/no-did-update-set-state\n      this.setState({ user: userFromServer.data });\n    }\n  }\n\n  render() {\n    const { userId, onChange } = this.props;\n    const { user } = this.state;\n\n    return (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\">\n          <button\n            className=\"CurrentUser__clear\"\n            type=\"button\"\n            onClick={() => {\n              onChange(userId);\n            }}\n\n          >\n            Clear\n          </button>\n          <span>\n            Selected user:\n            &nbsp;\n            {userId}\n          </span>\n        </h2>\n\n        <h3 className=\"CurrentUser__name\">{user.name}</h3>\n        <p className=\"CurrentUser__email\">{user.email}</p>\n        <p className=\"CurrentUser__phone\">{user.phone}</p>\n      </div>\n    );\n  }\n}\n\nCurrentUser.propTypes = {\n  userId: PropTypes.number.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    selectedUserId: 0,\n    query: '',\n    statusSelected: '',\n  };\n\n  componentDidMount() {\n    getTodos()\n      .then((result) => {\n        this.setState({ todos: result.data });\n      });\n  }\n\n  clearSelectedUserId = () => {\n    this.setState({\n      selectedUserId: 0,\n    });\n  }\n\n  setSelectedUserId = (result) => {\n    this.setState({\n      selectedUserId: result,\n\n    });\n  }\n\n  onFilterInputChange = (text) => {\n    this.setState({\n      query: text,\n    });\n  };\n\n  onSelectInputChange = (status) => {\n    this.setState({\n      statusSelected: status,\n    });\n  };\n\n  onCheckChange = (todoId) => {\n    this.setState(prevState => ({\n      todos: [\n        ...prevState.todos.map(todo => (todo.id === todoId\n          ? {\n            ...todo, competed: !todo.completed,\n          }\n          : todo)),\n      ],\n    }));\n  }\n\n  render() {\n    const {\n      todos,\n      selectedUserId,\n      query,\n      statusSelected,\n    } = this.state;\n\n    let todosFiltered = todos\n      .filter(todo => (todo\n      && todo.title\n      && todo.title.includes(query)));\n\n    switch (statusSelected) {\n      case 'active':\n        todosFiltered = todosFiltered\n          .filter(todo => todo.completed === false);\n        break;\n\n      case 'completed':\n        todosFiltered = todosFiltered\n          .filter(todo => todo.completed === true);\n        break;\n\n      default:\n        todosFiltered = [...todosFiltered];\n        break;\n    }\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={todosFiltered}\n            query={query}\n            statusSelected={statusSelected}\n            onFilterInputChange={this.onFilterInputChange}\n            onSelectInputChange={this.onSelectInputChange}\n            checkTodo={this.onCheckChange}\n            onChange={(userId) => {\n              this.setSelectedUserId(userId);\n            }}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n                onChange={(userId) => {\n                  this.clearSelectedUserId(userId);\n                }}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}